Schema Design: 
For Books : The books required fields such as author name, lender, genre, title, available, etc. 
create schema book_ed:
CREATE TABLE book_ed.book(
isbn varchar(30), NOT NULL, 
title varchar(200), NON-NULL,
lender user(1), NOT NULL,
genre choicefield(1) ,
)

For Users: Users require fields like username, name, email, mobile, address
create schema user;
CREATE TABLE Book_ed user(
username varchar(200) NOT NULL
name varchar(200) NOT NULL 
email emailfield (255) 
mobile phonefield 
Address varchar() NOT NULL



This is the corresponding models file.

Database documentation:

For Users:
The users have a login system (username and password) 
If the user wishes to borrow a book, s/he searches for the author name in the search box.
The searched name pops up and the person is able to check if the book is available for borrowing. If the book is available for borrowing, the lenderâ€™s username is visible, the user can request the book and can borrow it.

For Books:
        Each book has a unique lender who is a user. 
        Every book has a state, whether it is available or unavailable. Whenever a user       searches for the book, and borrows the book if it is available. Subsequently the availability status changes to unavailable. 
        
        
        Search:
        Since we know that the search shall be based on the Author Names, we can maintain a sorted database of books using the order by method in the views.py file so we effectively cansearch using binary search method. This will help reduce the number of querries.
        
        BONUS problem:
        
        When a person types a string in the search box, all the books having authors matching his search should be sorted on the basis of genre field. Where the sorting order is based on the number of times a book of a particular genre has been borrowed by the user. Thus we would need to create additional fields in the user class to accomodate storing of frequencies of previously borrowed books.


